// NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String            @id @default(cuid())
  name                   String
  email                  String?           @unique
  emailVerified          DateTime?
  image                  String            @default("")
  accounts               Account[]
  sessions               Session[]
  groupMembership        GroupMembership[]
  groupOwnership         Group[]
  taskAssignment         TaskAssignment[]
  taskOwnership          Task[]
  categoryOwnership      Category[]
  finishedTasksCount     Int               @default(0)
  finishedTasksLateCount Int               @default(0)

  @@index([name])
  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id                  String               @id @default(cuid())
  title               String
  description         String               @default("")
  createdOn           DateTime             @default(now())
  dueOn               DateTime?
  startOn             DateTime?
  finishedOn          DateTime?
  group               Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId             String
  author              User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId            String
  taskAssignment      TaskAssignment[]
  categories          CategoryAssignment[]
  confirmedAsFinished Boolean              @default(false)

  @@index([authorId])
  @@index([groupId])
  @@index([title])
  @@index([confirmedAsFinished])
}

model Group {
  id              String            @id @default(cuid())
  name            String
  tasks           Task[]
  groupMembership GroupMembership[]
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Restrict)
  ownerId         String
  description     String            @default("")
  categories      Category[]

  @@index([name])
  @@index([ownerId])
}

model Category {
  id                 String               @id @default(cuid())
  name               String
  description        String               @default("")
  authorId           String
  author             User                 @relation(fields: [authorId], references: [id], onDelete: Restrict)
  categoryAssignment CategoryAssignment[]
  groupId            String
  group              Group                @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([authorId])
  @@index([groupId])
}

model GroupMembership {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model TaskAssignment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
}

model CategoryAssignment {
  id         String   @id @default(cuid())
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([categoryId, taskId])
  @@index([categoryId])
  @@index([taskId])
}
